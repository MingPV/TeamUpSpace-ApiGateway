// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: proto/userreport/userreport.proto

package userreport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserReportServiceClient is the client API for UserReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserReportServiceClient interface {
	CreateUserReport(ctx context.Context, in *CreateUserReportRequest, opts ...grpc.CallOption) (*CreateUserReportResponse, error)
	FindUserReportByID(ctx context.Context, in *FindUserReportByIDRequest, opts ...grpc.CallOption) (*FindUserReportByIDResponse, error)
	FindAllByReporter(ctx context.Context, in *FindAllByReporterRequest, opts ...grpc.CallOption) (*FindAllByReporterResponse, error)
	FindAllByReportTo(ctx context.Context, in *FindAllByReportToRequest, opts ...grpc.CallOption) (*FindAllByReportToResponse, error)
	FindAllUserReports(ctx context.Context, in *FindAllUserReportsRequest, opts ...grpc.CallOption) (*FindAllUserReportsResponse, error)
	PatchUserReport(ctx context.Context, in *PatchUserReportRequest, opts ...grpc.CallOption) (*PatchUserReportResponse, error)
	DeleteUserReport(ctx context.Context, in *DeleteUserReportRequest, opts ...grpc.CallOption) (*DeleteUserReportResponse, error)
}

type userReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserReportServiceClient(cc grpc.ClientConnInterface) UserReportServiceClient {
	return &userReportServiceClient{cc}
}

func (c *userReportServiceClient) CreateUserReport(ctx context.Context, in *CreateUserReportRequest, opts ...grpc.CallOption) (*CreateUserReportResponse, error) {
	out := new(CreateUserReportResponse)
	err := c.cc.Invoke(ctx, "/userreport.UserReportService/CreateUserReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReportServiceClient) FindUserReportByID(ctx context.Context, in *FindUserReportByIDRequest, opts ...grpc.CallOption) (*FindUserReportByIDResponse, error) {
	out := new(FindUserReportByIDResponse)
	err := c.cc.Invoke(ctx, "/userreport.UserReportService/FindUserReportByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReportServiceClient) FindAllByReporter(ctx context.Context, in *FindAllByReporterRequest, opts ...grpc.CallOption) (*FindAllByReporterResponse, error) {
	out := new(FindAllByReporterResponse)
	err := c.cc.Invoke(ctx, "/userreport.UserReportService/FindAllByReporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReportServiceClient) FindAllByReportTo(ctx context.Context, in *FindAllByReportToRequest, opts ...grpc.CallOption) (*FindAllByReportToResponse, error) {
	out := new(FindAllByReportToResponse)
	err := c.cc.Invoke(ctx, "/userreport.UserReportService/FindAllByReportTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReportServiceClient) FindAllUserReports(ctx context.Context, in *FindAllUserReportsRequest, opts ...grpc.CallOption) (*FindAllUserReportsResponse, error) {
	out := new(FindAllUserReportsResponse)
	err := c.cc.Invoke(ctx, "/userreport.UserReportService/FindAllUserReports", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReportServiceClient) PatchUserReport(ctx context.Context, in *PatchUserReportRequest, opts ...grpc.CallOption) (*PatchUserReportResponse, error) {
	out := new(PatchUserReportResponse)
	err := c.cc.Invoke(ctx, "/userreport.UserReportService/PatchUserReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReportServiceClient) DeleteUserReport(ctx context.Context, in *DeleteUserReportRequest, opts ...grpc.CallOption) (*DeleteUserReportResponse, error) {
	out := new(DeleteUserReportResponse)
	err := c.cc.Invoke(ctx, "/userreport.UserReportService/DeleteUserReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserReportServiceServer is the server API for UserReportService service.
// All implementations must embed UnimplementedUserReportServiceServer
// for forward compatibility
type UserReportServiceServer interface {
	CreateUserReport(context.Context, *CreateUserReportRequest) (*CreateUserReportResponse, error)
	FindUserReportByID(context.Context, *FindUserReportByIDRequest) (*FindUserReportByIDResponse, error)
	FindAllByReporter(context.Context, *FindAllByReporterRequest) (*FindAllByReporterResponse, error)
	FindAllByReportTo(context.Context, *FindAllByReportToRequest) (*FindAllByReportToResponse, error)
	FindAllUserReports(context.Context, *FindAllUserReportsRequest) (*FindAllUserReportsResponse, error)
	PatchUserReport(context.Context, *PatchUserReportRequest) (*PatchUserReportResponse, error)
	DeleteUserReport(context.Context, *DeleteUserReportRequest) (*DeleteUserReportResponse, error)
	mustEmbedUnimplementedUserReportServiceServer()
}

// UnimplementedUserReportServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserReportServiceServer struct {
}

func (UnimplementedUserReportServiceServer) CreateUserReport(context.Context, *CreateUserReportRequest) (*CreateUserReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserReport not implemented")
}
func (UnimplementedUserReportServiceServer) FindUserReportByID(context.Context, *FindUserReportByIDRequest) (*FindUserReportByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserReportByID not implemented")
}
func (UnimplementedUserReportServiceServer) FindAllByReporter(context.Context, *FindAllByReporterRequest) (*FindAllByReporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllByReporter not implemented")
}
func (UnimplementedUserReportServiceServer) FindAllByReportTo(context.Context, *FindAllByReportToRequest) (*FindAllByReportToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllByReportTo not implemented")
}
func (UnimplementedUserReportServiceServer) FindAllUserReports(context.Context, *FindAllUserReportsRequest) (*FindAllUserReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllUserReports not implemented")
}
func (UnimplementedUserReportServiceServer) PatchUserReport(context.Context, *PatchUserReportRequest) (*PatchUserReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchUserReport not implemented")
}
func (UnimplementedUserReportServiceServer) DeleteUserReport(context.Context, *DeleteUserReportRequest) (*DeleteUserReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserReport not implemented")
}
func (UnimplementedUserReportServiceServer) mustEmbedUnimplementedUserReportServiceServer() {}

// UnsafeUserReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserReportServiceServer will
// result in compilation errors.
type UnsafeUserReportServiceServer interface {
	mustEmbedUnimplementedUserReportServiceServer()
}

func RegisterUserReportServiceServer(s grpc.ServiceRegistrar, srv UserReportServiceServer) {
	s.RegisterService(&UserReportService_ServiceDesc, srv)
}

func _UserReportService_CreateUserReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReportServiceServer).CreateUserReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userreport.UserReportService/CreateUserReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReportServiceServer).CreateUserReport(ctx, req.(*CreateUserReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReportService_FindUserReportByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserReportByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReportServiceServer).FindUserReportByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userreport.UserReportService/FindUserReportByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReportServiceServer).FindUserReportByID(ctx, req.(*FindUserReportByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReportService_FindAllByReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllByReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReportServiceServer).FindAllByReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userreport.UserReportService/FindAllByReporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReportServiceServer).FindAllByReporter(ctx, req.(*FindAllByReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReportService_FindAllByReportTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllByReportToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReportServiceServer).FindAllByReportTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userreport.UserReportService/FindAllByReportTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReportServiceServer).FindAllByReportTo(ctx, req.(*FindAllByReportToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReportService_FindAllUserReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllUserReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReportServiceServer).FindAllUserReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userreport.UserReportService/FindAllUserReports",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReportServiceServer).FindAllUserReports(ctx, req.(*FindAllUserReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReportService_PatchUserReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchUserReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReportServiceServer).PatchUserReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userreport.UserReportService/PatchUserReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReportServiceServer).PatchUserReport(ctx, req.(*PatchUserReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReportService_DeleteUserReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReportServiceServer).DeleteUserReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userreport.UserReportService/DeleteUserReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReportServiceServer).DeleteUserReport(ctx, req.(*DeleteUserReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserReportService_ServiceDesc is the grpc.ServiceDesc for UserReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userreport.UserReportService",
	HandlerType: (*UserReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserReport",
			Handler:    _UserReportService_CreateUserReport_Handler,
		},
		{
			MethodName: "FindUserReportByID",
			Handler:    _UserReportService_FindUserReportByID_Handler,
		},
		{
			MethodName: "FindAllByReporter",
			Handler:    _UserReportService_FindAllByReporter_Handler,
		},
		{
			MethodName: "FindAllByReportTo",
			Handler:    _UserReportService_FindAllByReportTo_Handler,
		},
		{
			MethodName: "FindAllUserReports",
			Handler:    _UserReportService_FindAllUserReports_Handler,
		},
		{
			MethodName: "PatchUserReport",
			Handler:    _UserReportService_PatchUserReport_Handler,
		},
		{
			MethodName: "DeleteUserReport",
			Handler:    _UserReportService_DeleteUserReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/userreport/userreport.proto",
}
