syntax = "proto3";

package userreport;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

option go_package = "proto/userreport";

message UserReport {
  int32 id = 1;
  string reporter = 2;
  string report_to = 3;
  string detail = 4;
  string status = 5;
}

message CreateUserReportRequest {
  string reporter = 1;
  string report_to = 2;
  string detail = 3;
  string status = 4;
}

message CreateUserReportResponse {
  UserReport user_report = 1;
}

message FindUserReportByIDRequest {
  int32 id = 1;
}

message FindUserReportByIDResponse {
  UserReport user_report = 1;
}

message FindAllByReporterRequest {
  string reporter = 1;
}

message FindAllByReporterResponse {
  repeated UserReport user_reports = 1;
}

message FindAllByReportToRequest {
  string report_to = 1;
}

message FindAllByReportToResponse {
  repeated UserReport user_reports = 1;
}

message FindAllUserReportsRequest {}

message FindAllUserReportsResponse {
  repeated UserReport user_reports = 1;
}

message PatchUserReportRequest {
  int32 id = 1;
  optional string detail = 2;
  optional string status = 3;
}

message PatchUserReportResponse {
  UserReport user_report = 1;
}

message DeleteUserReportRequest {
  int32 id = 1;
}

message DeleteUserReportResponse {
  string message = 1;
}

service UserReportService {
  rpc CreateUserReport(CreateUserReportRequest) returns (CreateUserReportResponse){
    option (google.api.http) = {
      post: "/api/v1/userReports"
      body: "*"
    };
  }
  rpc FindUserReportByID(FindUserReportByIDRequest) returns (FindUserReportByIDResponse){
    option (google.api.http) = {
      get: "/api/v1/userReports/{id}"
    };
  }
  rpc FindAllByReporter(FindAllByReporterRequest) returns (FindAllByReporterResponse){
    option (google.api.http) = {
      get: "/api/v1/userReports/reporter/{reporter}"
    };
  }
  rpc FindAllByReportTo(FindAllByReportToRequest) returns (FindAllByReportToResponse){
    option (google.api.http) = {
      get: "/api/v1/userReports/reportTo/{report_to}"
    };
  }
  rpc FindAllUserReports(FindAllUserReportsRequest) returns (FindAllUserReportsResponse){
    option (google.api.http) = {
      get: "/api/v1/userReports"
    };
  }
  rpc PatchUserReport(PatchUserReportRequest) returns (PatchUserReportResponse){
    option (google.api.http) = {
      patch: "/api/v1/userReports/{id}"
      body: "*"
    };
  }
  rpc DeleteUserReport(DeleteUserReportRequest) returns (DeleteUserReportResponse){
    option (google.api.http) = {
      delete: "/api/v1/userReports/{id}"
    };
  }
}