// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: proto/lastvisit/lastvisit.proto

package lastvisit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LastvisitServiceClient is the client API for LastvisitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LastvisitServiceClient interface {
	// rpc CreateLastvisit(CreateLastvisitRequest) returns (CreateLastvisitResponse);
	FindByUserID(ctx context.Context, in *FindByUserIDRequest, opts ...grpc.CallOption) (*FindByUserIDResponse, error)
	UpdateLastvisit(ctx context.Context, in *UpdateLastvisitRequest, opts ...grpc.CallOption) (*UpdateLastvisitResponse, error)
}

type lastvisitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLastvisitServiceClient(cc grpc.ClientConnInterface) LastvisitServiceClient {
	return &lastvisitServiceClient{cc}
}

func (c *lastvisitServiceClient) FindByUserID(ctx context.Context, in *FindByUserIDRequest, opts ...grpc.CallOption) (*FindByUserIDResponse, error) {
	out := new(FindByUserIDResponse)
	err := c.cc.Invoke(ctx, "/lastvisit.LastvisitService/FindByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lastvisitServiceClient) UpdateLastvisit(ctx context.Context, in *UpdateLastvisitRequest, opts ...grpc.CallOption) (*UpdateLastvisitResponse, error) {
	out := new(UpdateLastvisitResponse)
	err := c.cc.Invoke(ctx, "/lastvisit.LastvisitService/UpdateLastvisit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LastvisitServiceServer is the server API for LastvisitService service.
// All implementations must embed UnimplementedLastvisitServiceServer
// for forward compatibility
type LastvisitServiceServer interface {
	// rpc CreateLastvisit(CreateLastvisitRequest) returns (CreateLastvisitResponse);
	FindByUserID(context.Context, *FindByUserIDRequest) (*FindByUserIDResponse, error)
	UpdateLastvisit(context.Context, *UpdateLastvisitRequest) (*UpdateLastvisitResponse, error)
	mustEmbedUnimplementedLastvisitServiceServer()
}

// UnimplementedLastvisitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLastvisitServiceServer struct {
}

func (UnimplementedLastvisitServiceServer) FindByUserID(context.Context, *FindByUserIDRequest) (*FindByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByUserID not implemented")
}
func (UnimplementedLastvisitServiceServer) UpdateLastvisit(context.Context, *UpdateLastvisitRequest) (*UpdateLastvisitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLastvisit not implemented")
}
func (UnimplementedLastvisitServiceServer) mustEmbedUnimplementedLastvisitServiceServer() {}

// UnsafeLastvisitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LastvisitServiceServer will
// result in compilation errors.
type UnsafeLastvisitServiceServer interface {
	mustEmbedUnimplementedLastvisitServiceServer()
}

func RegisterLastvisitServiceServer(s grpc.ServiceRegistrar, srv LastvisitServiceServer) {
	s.RegisterService(&LastvisitService_ServiceDesc, srv)
}

func _LastvisitService_FindByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LastvisitServiceServer).FindByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lastvisit.LastvisitService/FindByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LastvisitServiceServer).FindByUserID(ctx, req.(*FindByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LastvisitService_UpdateLastvisit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLastvisitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LastvisitServiceServer).UpdateLastvisit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lastvisit.LastvisitService/UpdateLastvisit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LastvisitServiceServer).UpdateLastvisit(ctx, req.(*UpdateLastvisitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LastvisitService_ServiceDesc is the grpc.ServiceDesc for LastvisitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LastvisitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lastvisit.LastvisitService",
	HandlerType: (*LastvisitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindByUserID",
			Handler:    _LastvisitService_FindByUserID_Handler,
		},
		{
			MethodName: "UpdateLastvisit",
			Handler:    _LastvisitService_UpdateLastvisit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lastvisit/lastvisit.proto",
}
