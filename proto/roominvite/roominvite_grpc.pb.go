// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: proto/roominvite/roominvite.proto

package roominvite

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomInviteServiceClient is the client API for RoomInviteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomInviteServiceClient interface {
	CreateRoomInvite(ctx context.Context, in *CreateRoomInviteRequest, opts ...grpc.CallOption) (*CreateRoomInviteResponse, error)
	FindRoomInviteByID(ctx context.Context, in *FindRoomInviteByIDRequest, opts ...grpc.CallOption) (*FindRoomInviteByIDResponse, error)
	FindAllRoomInvitesBySender(ctx context.Context, in *FindAllRoomInvitesBySenderRequest, opts ...grpc.CallOption) (*FindAllRoomInvitesBySenderResponse, error)
	FindAllRoomInvitesByInviteTo(ctx context.Context, in *FindAllRoomInvitesByInviteToRequest, opts ...grpc.CallOption) (*FindAllRoomInvitesByInviteToResponse, error)
	FindAllRoomInvitesByRoomID(ctx context.Context, in *FindAllRoomInvitesByRoomIDRequest, opts ...grpc.CallOption) (*FindAllRoomInvitesByRoomIDResponse, error)
	PatchRoomInvite(ctx context.Context, in *PatchRoomInviteRequest, opts ...grpc.CallOption) (*PatchRoomInviteResponse, error)
	DeleteRoomInvite(ctx context.Context, in *DeleteRoomInviteRequest, opts ...grpc.CallOption) (*DeleteRoomInviteResponse, error)
	AcceptedRoomInvite(ctx context.Context, in *AcceptedRoomInviteRequest, opts ...grpc.CallOption) (*AcceptedRoomInviteResponse, error)
}

type roomInviteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomInviteServiceClient(cc grpc.ClientConnInterface) RoomInviteServiceClient {
	return &roomInviteServiceClient{cc}
}

func (c *roomInviteServiceClient) CreateRoomInvite(ctx context.Context, in *CreateRoomInviteRequest, opts ...grpc.CallOption) (*CreateRoomInviteResponse, error) {
	out := new(CreateRoomInviteResponse)
	err := c.cc.Invoke(ctx, "/roominvite.RoomInviteService/CreateRoomInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInviteServiceClient) FindRoomInviteByID(ctx context.Context, in *FindRoomInviteByIDRequest, opts ...grpc.CallOption) (*FindRoomInviteByIDResponse, error) {
	out := new(FindRoomInviteByIDResponse)
	err := c.cc.Invoke(ctx, "/roominvite.RoomInviteService/FindRoomInviteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInviteServiceClient) FindAllRoomInvitesBySender(ctx context.Context, in *FindAllRoomInvitesBySenderRequest, opts ...grpc.CallOption) (*FindAllRoomInvitesBySenderResponse, error) {
	out := new(FindAllRoomInvitesBySenderResponse)
	err := c.cc.Invoke(ctx, "/roominvite.RoomInviteService/FindAllRoomInvitesBySender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInviteServiceClient) FindAllRoomInvitesByInviteTo(ctx context.Context, in *FindAllRoomInvitesByInviteToRequest, opts ...grpc.CallOption) (*FindAllRoomInvitesByInviteToResponse, error) {
	out := new(FindAllRoomInvitesByInviteToResponse)
	err := c.cc.Invoke(ctx, "/roominvite.RoomInviteService/FindAllRoomInvitesByInviteTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInviteServiceClient) FindAllRoomInvitesByRoomID(ctx context.Context, in *FindAllRoomInvitesByRoomIDRequest, opts ...grpc.CallOption) (*FindAllRoomInvitesByRoomIDResponse, error) {
	out := new(FindAllRoomInvitesByRoomIDResponse)
	err := c.cc.Invoke(ctx, "/roominvite.RoomInviteService/FindAllRoomInvitesByRoomID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInviteServiceClient) PatchRoomInvite(ctx context.Context, in *PatchRoomInviteRequest, opts ...grpc.CallOption) (*PatchRoomInviteResponse, error) {
	out := new(PatchRoomInviteResponse)
	err := c.cc.Invoke(ctx, "/roominvite.RoomInviteService/PatchRoomInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInviteServiceClient) DeleteRoomInvite(ctx context.Context, in *DeleteRoomInviteRequest, opts ...grpc.CallOption) (*DeleteRoomInviteResponse, error) {
	out := new(DeleteRoomInviteResponse)
	err := c.cc.Invoke(ctx, "/roominvite.RoomInviteService/DeleteRoomInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomInviteServiceClient) AcceptedRoomInvite(ctx context.Context, in *AcceptedRoomInviteRequest, opts ...grpc.CallOption) (*AcceptedRoomInviteResponse, error) {
	out := new(AcceptedRoomInviteResponse)
	err := c.cc.Invoke(ctx, "/roominvite.RoomInviteService/AcceptedRoomInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomInviteServiceServer is the server API for RoomInviteService service.
// All implementations must embed UnimplementedRoomInviteServiceServer
// for forward compatibility
type RoomInviteServiceServer interface {
	CreateRoomInvite(context.Context, *CreateRoomInviteRequest) (*CreateRoomInviteResponse, error)
	FindRoomInviteByID(context.Context, *FindRoomInviteByIDRequest) (*FindRoomInviteByIDResponse, error)
	FindAllRoomInvitesBySender(context.Context, *FindAllRoomInvitesBySenderRequest) (*FindAllRoomInvitesBySenderResponse, error)
	FindAllRoomInvitesByInviteTo(context.Context, *FindAllRoomInvitesByInviteToRequest) (*FindAllRoomInvitesByInviteToResponse, error)
	FindAllRoomInvitesByRoomID(context.Context, *FindAllRoomInvitesByRoomIDRequest) (*FindAllRoomInvitesByRoomIDResponse, error)
	PatchRoomInvite(context.Context, *PatchRoomInviteRequest) (*PatchRoomInviteResponse, error)
	DeleteRoomInvite(context.Context, *DeleteRoomInviteRequest) (*DeleteRoomInviteResponse, error)
	AcceptedRoomInvite(context.Context, *AcceptedRoomInviteRequest) (*AcceptedRoomInviteResponse, error)
	mustEmbedUnimplementedRoomInviteServiceServer()
}

// UnimplementedRoomInviteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoomInviteServiceServer struct {
}

func (UnimplementedRoomInviteServiceServer) CreateRoomInvite(context.Context, *CreateRoomInviteRequest) (*CreateRoomInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoomInvite not implemented")
}
func (UnimplementedRoomInviteServiceServer) FindRoomInviteByID(context.Context, *FindRoomInviteByIDRequest) (*FindRoomInviteByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoomInviteByID not implemented")
}
func (UnimplementedRoomInviteServiceServer) FindAllRoomInvitesBySender(context.Context, *FindAllRoomInvitesBySenderRequest) (*FindAllRoomInvitesBySenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllRoomInvitesBySender not implemented")
}
func (UnimplementedRoomInviteServiceServer) FindAllRoomInvitesByInviteTo(context.Context, *FindAllRoomInvitesByInviteToRequest) (*FindAllRoomInvitesByInviteToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllRoomInvitesByInviteTo not implemented")
}
func (UnimplementedRoomInviteServiceServer) FindAllRoomInvitesByRoomID(context.Context, *FindAllRoomInvitesByRoomIDRequest) (*FindAllRoomInvitesByRoomIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllRoomInvitesByRoomID not implemented")
}
func (UnimplementedRoomInviteServiceServer) PatchRoomInvite(context.Context, *PatchRoomInviteRequest) (*PatchRoomInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRoomInvite not implemented")
}
func (UnimplementedRoomInviteServiceServer) DeleteRoomInvite(context.Context, *DeleteRoomInviteRequest) (*DeleteRoomInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoomInvite not implemented")
}
func (UnimplementedRoomInviteServiceServer) AcceptedRoomInvite(context.Context, *AcceptedRoomInviteRequest) (*AcceptedRoomInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptedRoomInvite not implemented")
}
func (UnimplementedRoomInviteServiceServer) mustEmbedUnimplementedRoomInviteServiceServer() {}

// UnsafeRoomInviteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomInviteServiceServer will
// result in compilation errors.
type UnsafeRoomInviteServiceServer interface {
	mustEmbedUnimplementedRoomInviteServiceServer()
}

func RegisterRoomInviteServiceServer(s grpc.ServiceRegistrar, srv RoomInviteServiceServer) {
	s.RegisterService(&RoomInviteService_ServiceDesc, srv)
}

func _RoomInviteService_CreateRoomInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInviteServiceServer).CreateRoomInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roominvite.RoomInviteService/CreateRoomInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInviteServiceServer).CreateRoomInvite(ctx, req.(*CreateRoomInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInviteService_FindRoomInviteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRoomInviteByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInviteServiceServer).FindRoomInviteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roominvite.RoomInviteService/FindRoomInviteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInviteServiceServer).FindRoomInviteByID(ctx, req.(*FindRoomInviteByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInviteService_FindAllRoomInvitesBySender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllRoomInvitesBySenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInviteServiceServer).FindAllRoomInvitesBySender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roominvite.RoomInviteService/FindAllRoomInvitesBySender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInviteServiceServer).FindAllRoomInvitesBySender(ctx, req.(*FindAllRoomInvitesBySenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInviteService_FindAllRoomInvitesByInviteTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllRoomInvitesByInviteToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInviteServiceServer).FindAllRoomInvitesByInviteTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roominvite.RoomInviteService/FindAllRoomInvitesByInviteTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInviteServiceServer).FindAllRoomInvitesByInviteTo(ctx, req.(*FindAllRoomInvitesByInviteToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInviteService_FindAllRoomInvitesByRoomID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllRoomInvitesByRoomIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInviteServiceServer).FindAllRoomInvitesByRoomID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roominvite.RoomInviteService/FindAllRoomInvitesByRoomID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInviteServiceServer).FindAllRoomInvitesByRoomID(ctx, req.(*FindAllRoomInvitesByRoomIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInviteService_PatchRoomInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRoomInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInviteServiceServer).PatchRoomInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roominvite.RoomInviteService/PatchRoomInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInviteServiceServer).PatchRoomInvite(ctx, req.(*PatchRoomInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInviteService_DeleteRoomInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInviteServiceServer).DeleteRoomInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roominvite.RoomInviteService/DeleteRoomInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInviteServiceServer).DeleteRoomInvite(ctx, req.(*DeleteRoomInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomInviteService_AcceptedRoomInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptedRoomInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomInviteServiceServer).AcceptedRoomInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/roominvite.RoomInviteService/AcceptedRoomInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomInviteServiceServer).AcceptedRoomInvite(ctx, req.(*AcceptedRoomInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomInviteService_ServiceDesc is the grpc.ServiceDesc for RoomInviteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomInviteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "roominvite.RoomInviteService",
	HandlerType: (*RoomInviteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoomInvite",
			Handler:    _RoomInviteService_CreateRoomInvite_Handler,
		},
		{
			MethodName: "FindRoomInviteByID",
			Handler:    _RoomInviteService_FindRoomInviteByID_Handler,
		},
		{
			MethodName: "FindAllRoomInvitesBySender",
			Handler:    _RoomInviteService_FindAllRoomInvitesBySender_Handler,
		},
		{
			MethodName: "FindAllRoomInvitesByInviteTo",
			Handler:    _RoomInviteService_FindAllRoomInvitesByInviteTo_Handler,
		},
		{
			MethodName: "FindAllRoomInvitesByRoomID",
			Handler:    _RoomInviteService_FindAllRoomInvitesByRoomID_Handler,
		},
		{
			MethodName: "PatchRoomInvite",
			Handler:    _RoomInviteService_PatchRoomInvite_Handler,
		},
		{
			MethodName: "DeleteRoomInvite",
			Handler:    _RoomInviteService_DeleteRoomInvite_Handler,
		},
		{
			MethodName: "AcceptedRoomInvite",
			Handler:    _RoomInviteService_AcceptedRoomInvite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/roominvite/roominvite.proto",
}
